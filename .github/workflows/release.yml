# This Manually Executable Workflow is for NPM Releases

name: Release [Manual]
on: workflow_dispatch
permissions:
  contents: write
  id-token: write
jobs:
  Release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # fetch-depth is necessary to get all tags
          # otherwise lerna can't detect the changes and will end up bumping the versions for all packages
          fetch-depth: 0
          token: ${{ secrets.RELEASE_COMMIT_GH_PAT }}
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Configure CI Git User
        run: |
          git config --global user.name $CONFIG_USERNAME
          git config --global user.email $CONFIG_EMAIL
          git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_PAT@github.com/sourcefuse/arc-saas
        env:
          GITHUB_PAT: ${{ secrets.RELEASE_COMMIT_GH_PAT }}
          CONFIG_USERNAME: ${{ vars.RELEASE_COMMIT_USERNAME }}
          CONFIG_EMAIL: ${{ vars.RELEASE_COMMIT_EMAIL }}
      # - name: Authenticate with Registry
      #   run: |
      #     echo "@${NPM_USERNAME}:registry=https://registry.npmjs.org/" > .npmrc
      #     echo "registry=https://registry.npmjs.org/" >> .npmrc
      #     echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
      #     npm whoami
      #   env:
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      #     NPM_USERNAME: ${{ vars.NPM_USERNAME }}

      - name: Bootstrap
        run: npm ci
      # this step is added only since this version of nx dependency is not being installed on linux systems
      # can be removed once this issue is fixed or we update to later versions
      - name: nx dependency
        run: npm i @nx/nx-linux-x64-gnu@16.10.0
      - name: Test
        run: npm run test --workspaces --if-present
      - name: Lint
        run: npm run lint --workspaces --if-present
      - name: Stash Changes
        run: git stash
      - name: Bump Versions
        # "HUSKY=0" disables pre-commit-msg check (Needed in order to allow lerna perform the release commit)
        # run: HUSKY=0 npx lerna version --yes --ci --conventional-commits
        # Bumping major version for release will remove once released
        run: HUSKY=0 npx lerna version --yes --ci --conventional-commits 
      # 🟢 This replaces 'lerna publish from-package --yes --provenance'
      # and replicates its logic safely while keeping provenance and trusted publishing.
      - name: Publish to npm with provenance 🚀
        run: |
          echo "Building packages..."
          npx lerna run build --stream --no-private || true

          echo "Publishing packages (with from-package logic + provenance)..."
          packages=$(npx lerna list --json --no-private)

          echo "$packages" | jq -r '.[] | [.name, .location] | @tsv' | while IFS=$'\t' read -r name location; do
            echo "🔍 Checking $name ..."
            cd "$location"

            local_version=$(jq -r '.version' package.json)
            remote_version=$(npm view "$name" version 2>/dev/null || echo "0.0.0")

            if [ "$local_version" != "$remote_version" ]; then
              echo "📦 Publishing $name@$local_version (previous: $remote_version)"
              npm publish --provenance --access public
            else
              echo "⏩ Skipping $name@$local_version (already published)"
            fi

            cd - >/dev/null
          done
